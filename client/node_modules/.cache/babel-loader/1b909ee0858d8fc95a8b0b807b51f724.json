{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Desktop/Social Media Coders/client/src/components/profile/Profile.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Spinner from '../layout/Spinner';\nimport { getProfileById } from '../../actions/profile';\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Profile = ({\n  getProfileById,\n  profile: {\n    profile,\n    loading\n  },\n  auth,\n  match\n}) => {\n  _s();\n\n  useEffect(() => {\n    getProfileById(match.params.id);\n  }, [getProfileById]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: profile === null || loading ? /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 45\n    }, this) : /*#__PURE__*/_jsxDEV(Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/profiles\",\n        className: \"btn btn-light\",\n        children: \"Back to Profiles\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 59\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Profile, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Profile;\nProfile.propTypes = {\n  getProfileById: PropTypes.func.isRequired,\n  profile: PropTypes.object.isRequired,\n  auth: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  profile: state.profile,\n  auth: state.auth\n});\n\nexport default connect(mapStateToProps, {\n  getProfileById\n})(Profile);\n\nvar _c;\n\n$RefreshReg$(_c, \"Profile\");","map":{"version":3,"sources":["/Users/mac/Desktop/Social Media Coders/client/src/components/profile/Profile.js"],"names":["React","Fragment","useEffect","PropTypes","connect","Spinner","getProfileById","Link","Profile","profile","loading","auth","match","params","id","propTypes","func","isRequired","object","mapStateToProps","state"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,SAASC,cAAT,QAA+B,uBAA/B;AACA,SAASC,IAAT,QAAqB,kBAArB;;;AAEA,MAAMC,OAAO,GAAG,CAAC;AACbF,EAAAA,cADa;AAEbG,EAAAA,OAAO,EAAE;AAAEA,IAAAA,OAAF;AAAWC,IAAAA;AAAX,GAFI;AAGbC,EAAAA,IAHa;AAGPC,EAAAA;AAHO,CAAD,KAIN;AAAA;;AACNV,EAAAA,SAAS,CAAC,MAAO;AACbI,IAAAA,cAAc,CAACM,KAAK,CAACC,MAAN,CAAaC,EAAd,CAAd;AACH,GAFQ,EAEN,CAACR,cAAD,CAFM,CAAT;AAGA,sBACI,QAAC,QAAD;AAAA,cACMG,OAAO,KAAK,IAAZ,IAAoBC,OAApB,gBAA8B,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YAA9B,gBAA4C,QAAC,QAAD;AAAA,6BAC1C,QAAC,IAAD;AAAM,QAAA,EAAE,EAAC,WAAT;AAAqB,QAAA,SAAS,EAAC,eAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAD0C;AAAA;AAAA;AAAA;AAAA;AADlD;AAAA;AAAA;AAAA;AAAA,UADJ;AAUH,CAlBD;;GAAMF,O;;KAAAA,O;AAoBNA,OAAO,CAACO,SAAR,GAAoB;AACpBT,EAAAA,cAAc,EAAEH,SAAS,CAACa,IAAV,CAAeC,UADX;AAEpBR,EAAAA,OAAO,EAAEN,SAAS,CAACe,MAAV,CAAiBD,UAFN;AAGpBN,EAAAA,IAAI,EAAER,SAAS,CAACe,MAAV,CAAiBD;AAHH,CAApB;;AAMA,MAAME,eAAe,GAAGC,KAAK,KAAK;AAC9BX,EAAAA,OAAO,EAAEW,KAAK,CAACX,OADe;AAE9BE,EAAAA,IAAI,EAAES,KAAK,CAACT;AAFkB,CAAL,CAA7B;;AAKA,eAAeP,OAAO,CAACe,eAAD,EAAkB;AAAEb,EAAAA;AAAF,CAAlB,CAAP,CAA6CE,OAA7C,CAAf","sourcesContent":["import React, { Fragment, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux';\nimport Spinner from '../layout/Spinner';\nimport { getProfileById } from '../../actions/profile';\nimport { Link } from 'react-router-dom'\n\nconst Profile = ({ \n    getProfileById, \n    profile: { profile, loading }, \n    auth, match \n    }) => {\n    useEffect(() =>  {\n        getProfileById(match.params.id);\n    }, [getProfileById]);\n    return (\n        <Fragment>\n            { profile === null || loading ? <Spinner /> : <Fragment>\n                <Link to='/profiles' className='btn btn-light'>\n                Back to Profiles\n                </Link>\n                </Fragment>}\n\n        </Fragment>\n    )\n}\n\nProfile.propTypes = {\ngetProfileById: PropTypes.func.isRequired,\nprofile: PropTypes.object.isRequired,\nauth: PropTypes.object.isRequired,\n}\n\nconst mapStateToProps = state => ({\n    profile: state.profile,\n    auth: state.auth\n})\n\nexport default connect(mapStateToProps, { getProfileById })(Profile)"]},"metadata":{},"sourceType":"module"}